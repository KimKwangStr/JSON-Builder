name: Build Windows EXE (Heredoc)
on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build.yml'
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Show Python & pip
        shell: bash
        run: |
          python --version
          python -m pip --version

      - name: Install PyInstaller
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pyinstaller
          python -m PyInstaller --version

      # Write a clean, known-good copy of build_json_gui.py using Bash heredoc
      - name: Write build_json_gui.py
        shell: bash
        run: |
          cat > build_json_gui.py << 'PYCODE'
# build_json_gui.py
# JSON builder GUI for DistillerSR-like template
# - SP&D under Extraction.child_forms keyed as "spd_XX"
# - Safety under SP&D; Harms under Safety linked by safety_id
# - Performance (discrete) under SP&D
# - Optional Follow-up Subform
# - user = "KimKwang" everywhere
import json, csv, copy, tkinter as tk
from tkinter import filedialog, messagebox, ttk
from typing import Any, Dict, List, Tuple, Set
from collections import defaultdict
USER_NAME = "KimKwang"
def read_json(path: str):
    with open(path, "r", encoding="utf-8") as f:
        return json.loads(f.read().strip())
def write_json(path: str, data: Any):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)
def read_csv(path: str) -> List[Dict[str,str]]:
    rows: List[Dict[str,str]] = []
    with open(path, "r", encoding="utf-8-sig", newline="") as f:
        for r in csv.DictReader(f):
            rows.append({(k or "").strip(): (v or "").strip() for k, v in r.items()})
    return rows
def deep_clone(obj: Any) -> Any:
    return json.loads(json.dumps(obj))
class TemplateForms:
    def __init__(self, template_obj: Any):
        if isinstance(template_obj, list): root = template_obj[0]
        elif isinstance(template_obj, dict): root = template_obj
        else: raise ValueError("Unexpected template format")
        ds_dict = root.get("data_sets", {}) or {}
        if not ds_dict: raise ValueError("Template does not contain data_sets")
        first_ds_key = next(iter(ds_dict.keys()))
        self.extraction_proto = deep_clone(ds_dict[first_ds_key])
        self.spd_proto = None
        self.safety_proto = None
        self.perf_discrete_proto = None
        self.harms_proto = None
        self.followup_proto = None
        for _, v in (self.extraction_proto.get("child_forms", {}) or {}).items():
            name = (v.get("form") or "").strip()
            if name == "Study Parameters and Demographics":
                self.spd_proto = deep_clone(v)
            elif name == "Safety":
                self.safety_proto = deep_clone(v)
            elif name == "Performance (discrete)":
                self.perf_discrete_proto = deep_clone(v)
            elif name == "Follow-up Subform":
                self.followup_proto = deep_clone(v)
        if self.spd_proto:
            for _, v in (self.spd_proto.get("child_forms", {}) or {}).items():
                nm = (v.get("form") or "").strip()
                if nm == "Follow-up Subform" and self.followup_proto is None:
                    self.followup_proto = deep_clone(v)
                if nm == "Safety" and self.safety_proto is None:
                    self.safety_proto = deep_clone(v)
                if nm == "Performance (discrete)" and self.perf_discrete_proto is None:
                    self.perf_discrete_proto = deep_clone(v)
        if self.safety_proto:
            for _, v in (self.safety_proto.get("child_forms", {}) or {}).items():
                if (v.get("form") or "").strip() == "Harms":
                    self.harms_proto = deep_clone(v); break
    def question_types(self, form_proto: Dict[str, Any]) -> Dict[str, str]:
        out: Dict[str, str] = {}
        for q in form_proto.get("data", []) or []:
            out[q.get("question","")] = q.get("type","Text")
        return out
class JSONBuilder:
    def __init__(self, tf: TemplateForms, logfn):
        self.t = tf
        self.log = logfn
        self.next_id = 10000
    def _gen_id(self) -> str:
        self.next_id += 1
        return str(self.next_id)
    def _make_extraction(self, refid: str) -> Dict[str, Any]:
        ds = deep_clone(self.t.extraction_proto)
        ds["key"] = str(refid); ds["user"] = USER_NAME
        for q in ds.get("data", []) or []:
            if q.get("question") == "Article Identifier":
                q.setdefault("response", {})["text"] = str(refid)
        ds["child_forms"] = {}
        return ds
    def _empty_from_proto(self, form_proto: Dict[str, Any]) -> Dict[str, Any]:
        form = deep_clone(form_proto); form["user"] = USER_NAME
        form["data"] = [{"question": q.get("question",""),
                         "type": q.get("type","Text"),
                         "response":{"answer":"", "text":""}}
                        for q in (form_proto.get("data", []) or [])]
        form.setdefault("child_forms", {})
        return form
    def _populate_form_from_row(self, form_proto: Dict[str, Any], row: Dict[str, str]) -> Dict[str, Any]:
        form = deep_clone(form_proto); form["user"] = USER_NAME; form["data"]=[]
        qtypes = self.t.question_types(form_proto)
        for q_text, q_type in qtypes.items():
            if q_text in row:
                val = row[q_text]
                if q_text == "Associated CERs":
                    items = [x.strip() for x in val.replace(";", ",").split(",") if x.strip()]
                    if not items:
                        form["data"].append({"question": q_text, "type": q_type,
                                             "response": {"text": "", "answer": ""}})
                    else:
                        for item in items:
                            form["data"].append({"question": q_text, "type": q_type,
                                                 "response": {"text": "", "answer": item}})
                else:
                    resp = {"answer":"", "text":""}
                    if q_type in ("Radio","Checkbox"): resp["answer"] = val
                    else: resp["text"] = val
                    form["data"].append({"question": q_text, "type": q_type, "response": resp})
